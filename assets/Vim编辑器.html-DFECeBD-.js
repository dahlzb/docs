import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as r,a as d,b as t,d as n,e as s}from"./app-XV8Z6alK.js";const i={},l=s(`<h2 id="vim编辑器" tabindex="-1"><a class="header-anchor" href="#vim编辑器"><span>Vim编辑器</span></a></h2><h4 id="使用-vim-命令进入-vim-界面" tabindex="-1"><a class="header-anchor" href="#使用-vim-命令进入-vim-界面"><span>使用 vim 命令进入 vim 界面</span></a></h4><p>vim 后面加上你要打开的已存在的文件名或者不存在（则作为新建文件）的文件名。在环境里输入下面的命令：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">vim</span> practice_1.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>直接使用 vim 也可以打开 vim 编辑器，但是不会打开任何文件。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">vim</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>进入命令行模式后输入 <code>:e </code> 同样可以打开相应文件。</p><h4 id="游标移动" tabindex="-1"><a class="header-anchor" href="#游标移动"><span>游标移动</span></a></h4><p>在进入 vim 后，按下 <code>i</code> 键进入插入模式。在该模式下您可以输入文本信息,下面请输入如下三行信息：</p><div class="language-txt line-numbers-mode" data-ext="txt" data-title="txt"><pre class="language-txt"><code>12345678
abcdefghijk
shiyanlou.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>按<code>Esc</code>进入普通模式，在该模式下使用方向键或者 <code>h</code>，<code>j</code>，<code>k</code>，<code>l</code> 键可以移动游标。</p><table><thead><tr><th>按键</th><th>说明</th></tr></thead><tbody><tr><td><code>h</code></td><td>左</td></tr><tr><td><code>l</code></td><td>右（小写 L）</td></tr><tr><td><code>j</code></td><td>下</td></tr><tr><td><code>k</code></td><td>上</td></tr><tr><td><code>w</code></td><td>移动到下一个单词</td></tr><tr><td><code>b</code></td><td>移动到上一个单词</td></tr></tbody></table><h4 id="进入插入模式" tabindex="-1"><a class="header-anchor" href="#进入插入模式"><span>进入插入模式</span></a></h4><p>在普通模式下使用下面的键将进入插入模式，并可以从相应的位置开始输入</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>i</code></td><td>在当前光标处进行编辑</td></tr><tr><td><code>I</code></td><td>在行首插入</td></tr><tr><td><code>A</code></td><td>在行末插入</td></tr><tr><td><code>a</code></td><td>在光标后插入编辑</td></tr><tr><td><code>o</code></td><td>在当前行后插入一个新行</td></tr><tr><td><code>O</code></td><td>在当前行前插入一个新行</td></tr><tr><td><code>cw</code></td><td>替换从光标所在位置后到一个单词结尾的字符</td></tr></tbody></table><h4 id="命令行模式下保存文档" tabindex="-1"><a class="header-anchor" href="#命令行模式下保存文档"><span>命令行模式下保存文档</span></a></h4><p>从普通模式输入 <code>:</code> 进入命令行模式，输入 <code>w</code> 回车，保存文档。输入 <code>:w </code> 可以将文档另存为其他文件名或存到其它路径下。</p><h4 id="命令行模式下退出-vim" tabindex="-1"><a class="header-anchor" href="#命令行模式下退出-vim"><span>命令行模式下退出 vim</span></a></h4><p>从普通模式输入 <code>:</code> 进入命令行模式，输入 <code>wq</code> 回车，保存并退出编辑。</p><p>以下为其它几种退出方式：</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>:q!</code></td><td>强制退出，不保存</td></tr><tr><td><code>:q</code></td><td>退出</td></tr><tr><td><code>:wq!</code></td><td>强制保存并退出</td></tr><tr><td><code>:w &lt;文件路径&gt;</code></td><td>另存为</td></tr><tr><td><code>:saveas 文件路径</code></td><td>另存为</td></tr><tr><td><code>:x</code></td><td>保存并退出</td></tr><tr><td><code>:wq</code></td><td>保存并退出</td></tr></tbody></table><h4 id="普通模式下退出-vim" tabindex="-1"><a class="header-anchor" href="#普通模式下退出-vim"><span>普通模式下退出 vim</span></a></h4><p>普通模式下按下 <code>Shift+zz</code> 即可保存退出 vim。</p><h4 id="普通模式下删除-vim-文本信息" tabindex="-1"><a class="header-anchor" href="#普通模式下删除-vim-文本信息"><span>普通模式下删除 vim 文本信息</span></a></h4><p>进入普通模式，使用下列命令可以进行文本快速删除：</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>x</code></td><td>删除游标所在的字符</td></tr><tr><td><code>X</code></td><td>删除游标所在前一个字符</td></tr><tr><td><code>Delete</code></td><td>同 <code>x</code></td></tr><tr><td><code>dd</code></td><td>删除整行</td></tr><tr><td><code>dw</code></td><td>删除一个单词（不适用中文）</td></tr><tr><td><code>d$</code>或<code>D</code></td><td>删除至行尾</td></tr><tr><td><code>d^</code></td><td>删除至行首</td></tr><tr><td><code>dG</code></td><td>删除到文档结尾处</td></tr><tr><td><code>d1G</code></td><td>删至文档首部</td></tr></tbody></table><p>除此之外，你还可以在命令之前加上数字，表示一次删除多行，如：</p><p><code>2dd</code> 表示一次删除 2 行。</p><h4 id="执行指定次数相同的命令" tabindex="-1"><a class="header-anchor" href="#执行指定次数相同的命令"><span>执行指定次数相同的命令</span></a></h4><p>进入普通模式输入 <code>N</code>，N 表示重复后面的次数，下面来练习：</p><p>打开文件文件进行编辑</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">vim</span> protocols
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下面你可以依次进行如下操作练习：</p><ul><li>输入 <code>10x</code>，删除 10 个连续字符</li><li>输入 <code>3dd</code>，将会删除 3 行文本</li></ul><p>在普通模式下，你还可以使用 <code>dw</code> 或者 <code>daw</code>(delete a word)删除一个单词，所以你可以很容易的联想到 <code>dnw</code>(<strong>n 替换为相应数字</strong>) 表示删除 n 个单词。</p><h4 id="游标的快速跳转" tabindex="-1"><a class="header-anchor" href="#游标的快速跳转"><span>游标的快速跳转</span></a></h4><p>普通模式下，下列命令可以让光标快速调转到指定位置，我们分别讨论快速实现<strong>行间</strong>跳转和<strong>行内</strong>跳转。</p><h4 id="行间跳转" tabindex="-1"><a class="header-anchor" href="#行间跳转"><span>行间跳转</span></a></h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>nG</code>(n Shift+g) / <code>ngg</code></td><td>游标移动到第 n 行 <strong>(如果默认没有显示行号，请先进入命令模式，输入 <code>:set nu</code> 以显示行号)</strong></td></tr><tr><td><code>gg</code></td><td>游标移动到到第一行</td></tr><tr><td><code>G</code>(Shift+g)</td><td>到最后一行</td></tr></tbody></table><p><strong>小技巧：你在完成依次跳转后，可以使用 <code>Ctrl+o</code> 快速回到上一次(跳转前)光标所在位置</strong>,这个技巧很实用，比如当你在写代码时，忽然想起有个 bug，需要修改，这时候你跳过去改好了，只需要按下 <code>Ctrl+o</code> 就可以回到你之前的位置。vim 中会用很多类似的小技巧就等着你去发掘。</p><h4 id="行内跳转" tabindex="-1"><a class="header-anchor" href="#行内跳转"><span>行内跳转</span></a></h4><p>普通模式下使用下列命令在行内按照单词为单位进行跳转：</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>w</code></td><td>到下一个单词的开头</td></tr><tr><td><code>e</code></td><td>到当前单词的结尾</td></tr><tr><td><code>b</code></td><td>到前一个单词的开头</td></tr><tr><td><code>ge</code></td><td>到前一个单词的结尾</td></tr><tr><td><code>0</code>或<code>^</code></td><td>到行头</td></tr><tr><td><code>$</code></td><td>到行尾</td></tr><tr><td><code>f&lt;字母&gt;</code></td><td>向后搜索&lt;字母&gt;并跳转到第一个匹配的位置(非常实用)</td></tr><tr><td><code>F&lt;字母&gt;</code></td><td>向前搜索&lt;字母&gt;并跳转到第一个匹配的位置</td></tr><tr><td><code>t&lt;字母&gt;</code></td><td>向后搜索&lt;字母&gt;并跳转到第一个匹配位置之前的一个字母(不常用)</td></tr><tr><td><code>T&lt;字母&gt;</code></td><td>向前搜索&lt;字母&gt;并跳转到第一个匹配位置之后的一个字母(不常用)</td></tr></tbody></table><h4 id="复制及粘贴文本" tabindex="-1"><a class="header-anchor" href="#复制及粘贴文本"><span>复制及粘贴文本</span></a></h4><ul><li>普通模式中使用 <code>y</code> 复制</li><li>普通模式中，<code>yy</code> 复制游标所在的整行（<code>3yy</code> 表示复制 3 行）</li><li>普通模式中，<code>y^</code> 复制至行首，或 <code>y0</code>。不含光标所在处字符。</li><li>普通模式中，<code>y$</code> 复制至行尾。含光标所在处字符。</li><li>普通模式中，<code>yw</code> 复制一个单词。</li><li>普通模式中，<code>y2w</code> 复制两个单词。</li><li>普通模式中，<code>yG</code> 复制至文本末。</li><li>普通模式中，<code>y1G</code> 复制至文本开头。</li><li>普通模式中使用 <code>p</code> 粘贴</li><li>普通模式中，<code>p</code>(小写)代表粘贴至光标后（下）</li><li>普通模式中，<code>P</code>(大写)代表粘贴至光标前（上）</li></ul><p>打开文件进入普通模式练习上述命令，这会儿你就可以随意 <code>yy</code> 了。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">vim</span> protocols
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="剪切及粘贴" tabindex="-1"><a class="header-anchor" href="#剪切及粘贴"><span>剪切及粘贴</span></a></h4><p>其实前面讲得 <code>dd</code> 删除命令就是剪切，你每次 <code>dd</code> 删除文档内容后，便可以使用 <code>p</code> 来粘贴，也这一点可以让我们实现一个很爽快的功能——交换上下行。</p><p><code>ddp</code>，就这么简单，即实现了快速交换光标所在行与它下面的行。</p><h4 id="替换和撤销-undo-命令" tabindex="-1"><a class="header-anchor" href="#替换和撤销-undo-命令"><span>替换和撤销(Undo)命令</span></a></h4><p>替换和 Undo 命令都是针对普通模式下的操作：</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>r</code>+&lt;待替换字母&gt;</td><td>将游标所在字母替换为指定字母</td></tr><tr><td><code>R</code></td><td>连续替换，直到按下 <code>Esc</code></td></tr><tr><td><code>cc</code></td><td>替换整行，即删除游标所在行，并进入插入模式</td></tr><tr><td><code>cw</code></td><td>替换一个单词，即删除一个单词，并进入插入模式</td></tr><tr><td><code>C</code>(大写)</td><td>替换游标以后至行末</td></tr><tr><td><code>~</code></td><td>反转游标所在字母大小写</td></tr><tr><td><code>{n}u</code></td><td>撤销一次或 n 次操作</td></tr><tr><td><code>U</code>(大写)</td><td>撤销当前行的所有修改</td></tr><tr><td><code>Ctrl+r</code></td><td>redo，即撤销 undo 的操作</td></tr></tbody></table><h4 id="快速缩进" tabindex="-1"><a class="header-anchor" href="#快速缩进"><span>快速缩进</span></a></h4><p><code>shiftwidth</code> 命令是指上一节 <code>&gt;&gt;</code> 命令产生的缩进（可以简写成<code>sw</code>），普通模式下输入 <code>:</code> 进入命令行模式下对 <code>shiftwidth</code> 值进行设置可以控制缩进和回退的字符数。</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>&gt;&gt;</code></td><td>整行将向右缩进（使用，用于格式化代码超爽）</td></tr><tr><td><code>&lt;&lt;</code></td><td>整行向左回退</td></tr><tr><td><code>:set shiftwidth?</code></td><td>获取设定的缩进回退字符数</td></tr><tr><td><code>:set shiftwidth=10</code></td><td>设置缩进为 10 个字符</td></tr></tbody></table><h4 id="调整文本位置" tabindex="-1"><a class="header-anchor" href="#调整文本位置"><span>调整文本位置</span></a></h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>:ce</code></td><td>使本行内容居中</td></tr><tr><td><code>:ri</code></td><td>使本行文本靠右</td></tr><tr><td><code>:le</code></td><td>使本行内容靠左</td></tr></tbody></table><h4 id="快速查找" tabindex="-1"><a class="header-anchor" href="#快速查找"><span>快速查找</span></a></h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>/查找的字符</code></td><td>向下查找</td></tr><tr><td><code>?查找的字符</code></td><td>向上查找</td></tr><tr><td><code>n</code></td><td>查找下一个内容</td></tr><tr><td><code>N</code></td><td>查找上一个内容</td></tr><tr><td><code>:noh</code></td><td>取消搜索</td></tr><tr><td><code>:set hls</code></td><td>设置搜索高亮</td></tr></tbody></table><h4 id="高级查找" tabindex="-1"><a class="header-anchor" href="#高级查找"><span>高级查找</span></a></h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>\\*</code></td><td>寻找游标所在处的单词，向下查找</td></tr><tr><td><code>\\#</code></td><td>寻找游标所在处的单词，向上查找</td></tr><tr><td><code>g\\*</code></td><td>寻找游标所在处的单词，向下查找，部分符合该单词即可</td></tr><tr><td><code>g\\#</code></td><td>寻找游标所在处的单词，向上查找，部分符合该单词即可</td></tr></tbody></table><h4 id="多文件编辑" tabindex="-1"><a class="header-anchor" href="#多文件编辑"><span>多文件编辑</span></a></h4><p>同时打开多个文件</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">vim</span> <span class="token number">1</span>.txt <span class="token number">2</span>.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>进入Vim后打开新文件</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>:e <span class="token number">3</span>.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>:n</code></td><td>切换到下一个文件</td></tr><tr><td><code>:n!</code></td><td>强制切换到下一个文件，不会保存文件内容输入的内容</td></tr><tr><td><code>:N</code></td><td>切换到上一个文件</td></tr><tr><td><code>:N!</code></td><td>强制切换到下一个文件，不会保存文件内容输入的内容</td></tr><tr><td><code>:e 3.txt</code></td><td>打开新文件3.txt</td></tr><tr><td><code>:e#</code></td><td>回到前一个文件</td></tr><tr><td><code>:ls</code></td><td>列出以前编辑过的文档</td></tr><tr><td>\`\`:b [文件名</td><td>编号]\`\`</td></tr><tr><td>\`\`:bd [文件名</td><td>编号]\`\`</td></tr><tr><td><code>:e! 4.txt</code></td><td>新打开文件4.txt，放弃正在编辑的文件</td></tr><tr><td><code>:f</code></td><td>显示正在编辑的文件名</td></tr><tr><td><code>:f new.txt</code></td><td>改变正在编辑的文件名字为 new.txt</td></tr></tbody></table><h4 id="恢复文件" tabindex="-1"><a class="header-anchor" href="#恢复文件"><span>恢复文件</span></a></h4><blockquote><p>由于在线环境无法复现此场景，请在本地尝试。</p></blockquote><p>如果因为断电，终端意外关闭等原因造成文档没有保存，可以采用恢复方式。</p><p>vim 在编辑的时候会自动在当前文件目录下生成一个交换文件，一般以 <code>.swp</code> 的格式保存，如果有多个版本的交换文件，还可能是 <code>.swn</code>，<code>.swm</code> 等字母。注意这个交换文件的更新不是实时的，因为实时的更新会占用磁盘，影响系统其他正常进程的速度。</p><p>当 vim 意外终止且没有保存已编辑的内容时，可以使用交换文件对文件进行恢复，注意需要在编辑这个文件的地方进行编辑，因为交换文件默认在编辑的目录生成。</p><p>例如假设 <code>1.txt</code> 意外关闭，我们可以输入 <code>vim</code> 然后输入 <code>:recover 1.txt</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">vim</span>
:recover <span class="token number">1</span>.txt

<span class="token comment"># 出现如下提示按下回车即可恢复，如果有多个版本需要输入对应的交换文件前的数字选择要恢复的版本。</span>
Using swap <span class="token function">file</span> <span class="token string">&quot;.1.txt.swp&quot;</span>
Original <span class="token function">file</span> <span class="token string">&quot;~/test/1.txt&quot;</span>
Recovery completed. You should check <span class="token keyword">if</span> everything is OK.
<span class="token punctuation">(</span>You might want to <span class="token function">write</span> out this <span class="token function">file</span> under another name
and run <span class="token function">diff</span> with the original <span class="token function">file</span> to check <span class="token keyword">for</span> changes<span class="token punctuation">)</span>
You may want to delete the .swp <span class="token function">file</span> now.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者输入 <code>vim -r</code> 后直接选择用于恢复的文档的交换文件即可：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">vim</span> <span class="token parameter variable">-r</span> <span class="token number">1</span>.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="可视模式" tabindex="-1"><a class="header-anchor" href="#可视模式"><span>可视模式</span></a></h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>v</code></td><td>进入字符选择模式，移动光标走过的地方就会选取，再次按下 <code>v</code> 取消选取</td></tr><tr><td><code>Shift+v</code></td><td>进入行选择模式，上下移动光标选择行，再次按下取消选取</td></tr><tr><td><code>Ctrl+v</code></td><td>区域选择模式，可以进行矩形区域选择，再次按下取消选取</td></tr></tbody></table><h4 id="视窗操作" tabindex="-1"><a class="header-anchor" href="#视窗操作"><span>视窗操作</span></a></h4><p>vim 可以在一个界面里打开多个窗口进行编辑，这些编辑窗口称为 vim 的视窗。</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>:new</code></td><td>打开一个新的Vim视窗，并进入视窗编辑一个新文件</td></tr><tr><td><code>Ctrl+w</code></td><td>打开一个新的Vim视窗，并进入视窗编辑一个新文件</td></tr><tr><td><code>:sp 1.txt</code></td><td>打开一个新的Vim视窗，并进入视窗编辑一个新文件</td></tr><tr><td><code>:vsp 2.txt</code></td><td>打开一个新的Vim视窗，并进入视窗编辑一个新文件</td></tr><tr><td><code>Ctrl+w s</code></td><td>将当前窗口分割成两个水平的窗口</td></tr><tr><td><code>Ctrl+w v</code></td><td>将当前窗口分割成两个垂直的窗口</td></tr><tr><td><code>Ctrl+w q</code></td><td>即 :q结束分割出来的视窗，如果在新视窗中有输入需要使用强制符！即:q!</td></tr><tr><td><code>Ctrl+w o</code></td><td>打开一个视窗并且隐藏之前的所有视窗</td></tr><tr><td><code>Ctrl+w j</code></td><td>移至下面视窗</td></tr><tr><td><code>Ctrl+w k</code></td><td>移至上面视窗</td></tr><tr><td><code>Ctrl+w h</code></td><td>移至左边视窗</td></tr><tr><td><code>Ctrl+w l</code></td><td>移至右边视窗</td></tr><tr><td><code>Ctrl+w J</code></td><td>将当前视窗移至下面</td></tr><tr><td><code>Ctrl+w K</code></td><td>将当前视窗移至上面</td></tr><tr><td><code>Ctrl+w H</code></td><td>将当前视窗移至左边</td></tr><tr><td><code>Ctrl+w L</code></td><td>将当前视窗移至右边</td></tr><tr><td><code>Ctrl+w -</code></td><td>减小视窗的高度</td></tr><tr><td><code>Ctrl+w +</code></td><td>增加视窗的高度</td></tr></tbody></table><h4 id="创建加密文档" tabindex="-1"><a class="header-anchor" href="#创建加密文档"><span>创建加密文档</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">vim</span> <span class="token parameter variable">-x</span> file1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输入您的密码，确认密码，这样在下一次打开时，vim 就会要求你输入密码。</p><h4 id="在-vim-执行外部命令" tabindex="-1"><a class="header-anchor" href="#在-vim-执行外部命令"><span>在 vim 执行外部命令</span></a></h4><p>在命令行模式中输入 <code>!</code> 可以执行外部的 bash 命令。</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>:!ls</code></td><td>用于显示当前目录的内容</td></tr><tr><td><code>:!rm FILENAME</code></td><td>用于删除名为 FILENAME 的文件</td></tr><tr><td><code>:w FILENAME</code></td><td>可将当前 VIM 中正在编辑的文件另存为 FILENAME 文件</td></tr></tbody></table><h4 id="帮助系统" tabindex="-1"><a class="header-anchor" href="#帮助系统"><span>帮助系统</span></a></h4><ul><li>普通模式下按 <code>F1</code> 打开 <code>vim</code> 自己预设的帮助文档</li><li>命令行模式下输入 <code>:h shiftwidth</code> 打开名为 <code>shiftwidth</code> 的帮助文件</li><li>命令行模式下输入 <code>:ver</code> 显示版本及参数</li></ul><h4 id="功能设定" tabindex="-1"><a class="header-anchor" href="#功能设定"><span>功能设定</span></a></h4><p>可以在编辑文件的时候进行功能设定，如命令行模式下输入 <code>:set nu</code>（显示行数），设定值退出 vim 后不会保存。要永久保存配置需要修改 vim 配置文件。</p><p>vim 的配置文件 <code>~/.vimrc</code>（实验楼环境中配置文件在 <code>/etc/vim/vimrc</code>），可以打开文件进行修改，不过务必小心不要影响 vim 正常使用。</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>:set</code> 或 <code>:se</code></td><td>显示所有修改过的配置</td></tr><tr><td><code>:set all</code></td><td>显示所有的设定值</td></tr><tr><td><code>:set &lt;option&gt;?</code></td><td>显示 option 的设定值</td></tr><tr><td><code>:set nooption</code></td><td>取消当前设定值</td></tr><tr><td><code>:set autoindent(ai)</code></td><td>设置自动缩进</td></tr><tr><td><code>:set autowrite(aw)</code></td><td>设置自动存档，默认未打开</td></tr><tr><td><code>:set background=dark</code></td><td>设置背景风格，<code>dark</code> 或 <code>light</code></td></tr><tr><td><code>:set backup(bk)</code></td><td>设置自动备份，默认未打开</td></tr><tr><td><code>:set cindent(cin)</code></td><td>设置 C 语言风格缩进</td></tr></tbody></table>`,94),h={href:"http://vimdoc.sourceforge.net/htmldoc/usr_toc.html",target:"_blank",rel:"noopener noreferrer"};function p(m,b){const e=o("ExternalLinkIcon");return c(),r("div",null,[l,d("p",null,[t("更多详细参数请参考 "),d("a",h,[t("VIM 在线手册"),n(e)]),t("。")])])}const g=a(i,[["render",p],["__file","Vim编辑器.html.vue"]]),f=JSON.parse('{"path":"/devops/linux/Vim%E7%BC%96%E8%BE%91%E5%99%A8.html","title":"Vim编辑器","lang":"zh-CN","frontmatter":{"title":"Vim编辑器","date":"2024-04-12T17:07:05.000Z","order":2,"description":"Vim编辑器 使用 vim 命令进入 vim 界面 vim 后面加上你要打开的已存在的文件名或者不存在（则作为新建文件）的文件名。在环境里输入下面的命令： 直接使用 vim 也可以打开 vim 编辑器，但是不会打开任何文件。 进入命令行模式后输入 :e 同样可以打开相应文件。 游标移动 在进入 vim 后，按下 i 键进入插入模式。在该模式下您可以输入...","head":[["meta",{"property":"og:url","content":"https://dahlzb.github.io/docs/devops/linux/Vim%E7%BC%96%E8%BE%91%E5%99%A8.html"}],["meta",{"property":"og:site_name","content":"DahlZb小站"}],["meta",{"property":"og:title","content":"Vim编辑器"}],["meta",{"property":"og:description","content":"Vim编辑器 使用 vim 命令进入 vim 界面 vim 后面加上你要打开的已存在的文件名或者不存在（则作为新建文件）的文件名。在环境里输入下面的命令： 直接使用 vim 也可以打开 vim 编辑器，但是不会打开任何文件。 进入命令行模式后输入 :e 同样可以打开相应文件。 游标移动 在进入 vim 后，按下 i 键进入插入模式。在该模式下您可以输入..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-06T06:48:59.000Z"}],["meta",{"property":"article:author","content":"DahlZb"}],["meta",{"property":"article:published_time","content":"2024-04-12T17:07:05.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-06T06:48:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vim编辑器\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-12T17:07:05.000Z\\",\\"dateModified\\":\\"2024-06-06T06:48:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"DahlZb\\",\\"url\\":\\"https://github.com/dahlzb\\"}]}"]]},"headers":[{"level":2,"title":"Vim编辑器","slug":"vim编辑器","link":"#vim编辑器","children":[]}],"git":{"createdTime":1717656539000,"updatedTime":1717656539000,"contributors":[{"name":"DahlZ","email":"1304187196@qq.com","commits":1}]},"readingTime":{"minutes":11.16,"words":3347},"filePathRelative":"devops/linux/Vim编辑器.md","localizedDate":"2024年4月12日","excerpt":"<h2>Vim编辑器</h2>\\n<h4>使用 vim 命令进入 vim 界面</h4>\\n<p>vim 后面加上你要打开的已存在的文件名或者不存在（则作为新建文件）的文件名。在环境里输入下面的命令：</p>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token function\\">vim</span> practice_1.txt\\n</code></pre></div><p>直接使用 vim 也可以打开 vim 编辑器，但是不会打开任何文件。</p>","autoDesc":true}');export{g as comp,f as data};
