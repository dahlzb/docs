import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,e as n}from"./app-9uM0HX3Z.js";const d={},t=n(`<figure><img src="https://doc.shiyanlou.com/linux_base/4-1.png" alt="Linux目录结构" tabindex="0" loading="lazy"><figcaption>Linux目录结构</figcaption></figure><h3 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令"><span>常用命令</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 列出目录文件</span>
<span class="token function">ls</span>
<span class="token function">ls</span> /home
<span class="token comment"># 用较长格式列出文件</span>
<span class="token function">ls</span> <span class="token parameter variable">-l</span>
<span class="token comment"># 查看所有文件包括隐藏文件</span>
<span class="token function">ls</span> <span class="token parameter variable">-a</span>
<span class="token comment"># 查看某个目录的完整属性</span>
<span class="token function">ls</span> <span class="token parameter variable">-dl</span> <span class="token operator">&lt;</span>目录名<span class="token operator">&gt;</span>
<span class="token comment"># 显示所有文件大小 a-查看目录内所有文件，s-显示文件大小，S-按文件大小排序，</span>
<span class="token function">ls</span> <span class="token parameter variable">-asSh</span>
<span class="token comment"># 切换目录</span>
<span class="token builtin class-name">cd</span> /home/shiyanlou
<span class="token comment"># 创建文件</span>
<span class="token function">touch</span> asd.txt fgh.txt
<span class="token comment"># 创建连续的多个文件</span>
<span class="token function">touch</span> love_<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token number">10</span><span class="token punctuation">}</span>_shiyanlou.txt
<span class="token comment"># 查找文件</span>
<span class="token function">ls</span> *.txt
<span class="token comment"># 安装软件</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> sysvbanner
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Shell 常用通配符：</p><table><thead><tr><th>字符</th><th>含义</th></tr></thead><tbody><tr><td><code>*</code></td><td>匹配 0 或多个字符</td></tr><tr><td><code>?</code></td><td>匹配任意一个字符</td></tr><tr><td><code>[list]</code></td><td>匹配 list 中的任意单一字符</td></tr><tr><td><code>[^list]</code></td><td>匹配 除 list 中的任意单一字符以外的字符</td></tr><tr><td><code>[c1-c2]</code></td><td>匹配 c1-c2 中的任意单一字符 如：[0-9][a-z]</td></tr><tr><td><code>{string1,string2,...}</code></td><td>匹配 string1 或 string2 (或更多)其一字符串</td></tr><tr><td><code>{c1..c2}</code></td><td>匹配 c1-c2 中全部字符 如 <code>{1..10}</code></td></tr></tbody></table><h3 id="用户及文件权限管理" tabindex="-1"><a class="header-anchor" href="#用户及文件权限管理"><span>用户及文件权限管理</span></a></h3><h4 id="二、linux用户管理" tabindex="-1"><a class="header-anchor" href="#二、linux用户管理"><span>二、Linux用户管理</span></a></h4><h5 id="查看用户" tabindex="-1"><a class="header-anchor" href="#查看用户"><span>查看用户</span></a></h5><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">who</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>-a</code></td><td>打印能打印的全部</td></tr><tr><td><code>-d</code></td><td>打印死掉的进程</td></tr><tr><td><code>-m</code></td><td>同<code>am i</code>，<code>mom likes</code></td></tr><tr><td><code>-q</code></td><td>打印当前登录用户数及用户名</td></tr><tr><td><code>-u</code></td><td>打印当前登录用户登录信息</td></tr><tr><td><code>-r</code></td><td>打印运行等级</td></tr></tbody></table><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 新建用户</span>
<span class="token function">sudo</span> adduser lilei
<span class="token comment"># 删除用户 --remove-home 删除用户的工作目录，否则保存</span>
<span class="token function">sudo</span> deluser lilei --remove-home
<span class="token comment"># 切换登录用户</span>
<span class="token function">su</span> <span class="token parameter variable">-l</span> lilei
<span class="token comment"># 注销</span>
<span class="token builtin class-name">exit</span> 或 ctrl + d
<span class="token comment"># </span>
<span class="token comment"># 查看指定用户(lilei)的用户组</span>
<span class="token function">groups</span> lilei
<span class="token comment"># 将用户(lilei)添加到指定用户组(sudo)</span>
<span class="token function">sudo</span> <span class="token function">usermod</span> <span class="token parameter variable">-G</span> <span class="token function">sudo</span> lilei
<span class="token comment"># 删除用户组</span>
<span class="token function">groupdel</span> 组
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="adduser-和-useradd-的区别是什么" tabindex="-1"><a class="header-anchor" href="#adduser-和-useradd-的区别是什么"><span><code>adduser</code> 和 <code>useradd</code> 的区别是什么</span></a></h5><p>答：<code>useradd</code> 只创建用户，不会创建用户密码和工作目录，创建完了需要使用 <code>passwd </code> 去设置新用户的密码。<code>adduser</code> 在创建用户的同时，会创建工作目录和密码（提示你设置），做这一系列的操作。其实 <code>useradd</code>、<code>userdel</code> 这类操作更像是一种命令，执行完了就返回。而 <code>adduser</code> 更像是一种程序，需要你输入、确定等一系列操作。</p><p>Linux 还有一些关于隐藏权限和特殊权限的内容，想全面了解 Linux 权限管理这部分内容的用户可以通过其它方式学习。</p><h4 id="三、linux文件权限" tabindex="-1"><a class="header-anchor" href="#三、linux文件权限"><span>三、Linux文件权限</span></a></h4><h5 id="_3-2-变更文件所有者" tabindex="-1"><a class="header-anchor" href="#_3-2-变更文件所有者"><span>3.2 变更文件所有者</span></a></h5><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 变更文件所有者</span>
<span class="token function">sudo</span> <span class="token function">chown</span> 所有者名 文件名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-3-修改文件权限" tabindex="-1"><a class="header-anchor" href="#_3-3-修改文件权限"><span>3.3 修改文件权限</span></a></h5><p>每个文件有三组固定的权限，分别对应拥有者，所属用户组，其他用户，<strong>记住这个顺序是固定的</strong>。文件的读写执行对应字母 <code>rwx</code>，以二进制表示就是 <code>111</code>，用十进制表示就是 <code>7</code></p><p>方式一：二进制数字</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">chmod</span> <span class="token number">600</span> iphone11
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>方式二：加减赋值操作</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 去掉用户组、其它用户、用户的 rwx 权限</span>
<span class="token function">chmod</span> gou-rwx iphone11
<span class="token comment"># 给用户组添加 r 权限</span>
<span class="token function">chmod</span> g+r iphone11
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>g</code> 、<code>o</code> 、<code>u</code> 分别表示 group（用户组）、others（其他用户） 和 user（用户），<code>+</code> 和 <code>-</code> 分别表示增加和去掉相应的权限。</p><h3 id="目录结构及文件基本操作" tabindex="-1"><a class="header-anchor" href="#目录结构及文件基本操作"><span>目录结构及文件基本操作</span></a></h3><h4 id="新建" tabindex="-1"><a class="header-anchor" href="#新建"><span>新建</span></a></h4><p>新建空白文件</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">touch</span> <span class="token builtin class-name">test</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>新建目录</p><p>使用 <code>mkdir</code>（make directories）命令可以创建一个空目录，也可同时指定创建目录的权限属性。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> mydir
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用 <code>-p</code> 参数，同时创建父目录（如果不存在该父目录），如下我们同时创建一个多级目录（这在安装软件、配置安装路径时非常有用）：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> father/son/grandson 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>需要注意的是，若当前目录已经创建了一个 test 文件，再使用 <code>mkdir test</code> 新建同名的文件夹，系统会报错文件已存在。这符合 Linux 一切皆文件的理念。</p><p>若当前目录存在一个 test 文件夹，则 <code>touch</code> 命令，则会更改该文件夹的时间戳而不是新建文件。</p><h4 id="复制" tabindex="-1"><a class="header-anchor" href="#复制"><span>复制</span></a></h4><p>复制文件</p><p>将 <code>test</code> 文件复制到 <code>father/son/grandson</code> 目录中</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">cp</span> <span class="token builtin class-name">test</span> father/son/grandson
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>复制目录</p><p>要成功复制目录需要加上 <code>-r</code> 或者 <code>-R</code> 参数，表示递归复制，就是说有点“株连九族”的意思</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">cp</span> <span class="token parameter variable">-r</span> father family
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="删除" tabindex="-1"><a class="header-anchor" href="#删除"><span>删除</span></a></h4><p>删除文件</p><p>使用 <code>rm</code>（remove files or directories）命令删除一个文件 :</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">rm</span> <span class="token builtin class-name">test</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>强制删除</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">rm</span> <span class="token parameter variable">-f</span> <span class="token builtin class-name">test</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>删除目录</p><p>跟复制目录一样，要删除一个目录，也需要加上 <code>-r</code> 或 <code>-R</code> 参数：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">rm</span> <span class="token parameter variable">-r</span> family
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>遇到权限不足删除不了的目录也可以和删除文件一样加上 <code>-f</code> 参数：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">rm</span> <span class="token parameter variable">-rf</span> family
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="移动" tabindex="-1"><a class="header-anchor" href="#移动"><span>移动</span></a></h4><p>移动文件</p><p>使用 <code>mv</code>（move or rename files）命令移动文件（剪切）。命令格式是 <code>mv 源目录文件 目的目录</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">mv</span> file1 Documents
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>重命名文件</p><p><code>mv</code> 命令除了能移动文件外，还能给文件重命名。命令格式为 <code>mv 旧的文件名 新的文件名</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">mv</span> file1 myfile
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="批量重命名" tabindex="-1"><a class="header-anchor" href="#批量重命名"><span>批量重命名</span></a></h4><p>使用命令 <code>rename</code> 来实现，不过它的参数要用 perl 正则表达式。</p><p><code>rename</code> 不是内置命令， 若提示无该命令可以使用 <code>sudo apt-get install rename</code> 命令自行安装。</p><p><code>rename</code> 是先使用第二个参数的通配符匹配所有后缀为 <code>.txt</code> 的文件，然后使用第一个参数提供的正则表达式将匹配的这些文件的 <code>.txt</code> 后缀替换为 <code>.c</code></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /home/shiyanlou/

<span class="token comment"># 使用通配符批量创建 5 个文件:</span>
<span class="token function">touch</span> file<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token number">5</span><span class="token punctuation">}</span>.txt

<span class="token comment"># 批量将这 5 个后缀为 .txt 的文本文件重命名为以 .c 为后缀的文件:</span>
<span class="token function">rename</span> <span class="token string">&#39;s/\\.txt/\\.c/&#39;</span> *.txt

<span class="token comment"># 批量将这 5 个文件，文件名和后缀改为大写:</span>
<span class="token function">rename</span> <span class="token string">&#39;y/a-z/A-Z/&#39;</span> *.c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="查看文件" tabindex="-1"><a class="header-anchor" href="#查看文件"><span>查看文件</span></a></h4><p>使用 <code>cat</code>，<code>tac</code> 和 <code>nl</code> 命令查看文件</p><p>前两个命令都是用来打印文件内容到标准输出（终端），其中 <code>cat</code> 为正序显示，<code>tac</code> 为倒序显示。</p><p>比如要查看 <code>passwd</code> 文件</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">cat</span> <span class="token function">passwd</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以加上 <code>-n</code> 参数显示行号：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">cat</span> <span class="token parameter variable">-n</span> <span class="token function">passwd</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="使用-more-和-less-命令分页查看文件" tabindex="-1"><a class="header-anchor" href="#使用-more-和-less-命令分页查看文件"><span>使用 <code>more</code> 和 <code>less</code> 命令分页查看文件</span></a></h4><p>如果说上面的 <code>cat</code> 是用来快速查看一个文件的内容的，那么这个 <code>more</code> 和 <code>less</code> 就是天生用来&quot;阅读&quot;一个文件的内容的，比如说 man 手册内部就是使用的 <code>less</code> 来显示内容。其中 <code>more</code> 命令比较简单，只能向一个方向滚动，而 <code>less</code> 为基于 <code>more</code> 和 <code>vi</code> （一个强大的编辑器，我们有单独的课程来让你学习）开发，功能更强大。<code>less</code> 的使用基本和 <code>more</code> 一致，具体使用请查看 man 手册，这里只介绍 <code>more</code> 命令的使用。</p><p>使用 <code>more</code> 命令打开 <code>passwd</code> 文件：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">more</span> <span class="token function">passwd</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="使用-head-和-tail-命令查看文件" tabindex="-1"><a class="header-anchor" href="#使用-head-和-tail-命令查看文件"><span>使用 <code>head</code> 和 <code>tail</code> 命令查看文件</span></a></h4><p>这两个命令，那些性子比较急的人应该会喜欢，因为它们一个是只查看文件的头几行（默认为 10 行，不足 10 行则显示全部）和尾几行。还是拿 passwd 文件举例，比如当我们想要查看最近新增加的用户，那么我们可以查看这个 <code>/etc/passwd</code> 文件，不过我们前面也看到了，这个文件里面一大堆乱糟糟的东西，看起来实在费神啊。因为系统新增加一个用户，会将用户的信息添加到 passwd 文件的最后，那么这时候我们就可以使用 <code>tail</code> 命令了：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">tail</span> /etc/passwd
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>甚至更直接的只看一行， 加上 <code>-n</code> 参数，后面紧跟行数：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">tail</span> <span class="token parameter variable">-n</span> <span class="token number">1</span> /etc/passwd
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>关于 <code>tail</code> 命令，不得不提的还有它一个很牛的参数 <code>-f</code>，这个参数可以实现不停地读取某个文件的内容并显示。这可以让我们动态查看日志，达到实时监视的目的。不过我不会在这门基础课程中介绍它的更多细节，感兴趣的用户可以自己去了解。</p><h4 id="查看文件类型" tabindex="-1"><a class="header-anchor" href="#查看文件类型"><span>查看文件类型</span></a></h4><p>使用 <code>file</code> 命令查看文件的类型：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">file</span> /bin/ls
<span class="token function">file</span> shiyanlou.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>与 Windows 不同的是，如果你新建了一个 shiyanlou.txt 文件，Windows 会自动把它识别为文本文件，而 <code>file</code> 命令会识别为一个空文件。这个前面我提到过，在 Linux 中文件的类型不是根据文件后缀来判断的。当你在文件里输入内容后才会显示文件类型。</p><h4 id="编辑文件" tabindex="-1"><a class="header-anchor" href="#编辑文件"><span>编辑文件</span></a></h4><p>Vim</p><h3 id="环境变量" tabindex="-1"><a class="header-anchor" href="#环境变量"><span>环境变量</span></a></h3><h4 id="创建变量" tabindex="-1"><a class="header-anchor" href="#创建变量"><span>创建变量</span></a></h4><p>使用 <code>declare</code> 命令创建一个变量名为 tmp 的变量：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">declare</span> tmp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其实也可以不用 declare 预声明一个变量，直接即用即创建</p><p>使用 <code>=</code> 号赋值运算符，将变量 tmp 赋值为 shiyanlou。注意，与其他语言不同的是， Shell 中的赋值操作，<code>=</code> 两边不可以输入空格，否则会报错。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 正确的赋值</span>
<span class="token assign-left variable">tmp</span><span class="token operator">=</span>shiyanlou

<span class="token comment"># 错误的赋值</span>
tmp <span class="token operator">=</span> shiyanlou
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>读取变量的值，使用 <code>echo</code> 命令和 <code>$</code> 符号（<strong>$ 符号用于表示引用一个变量的值，初学者经常忘记输入</strong>）：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token variable">$tmp</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="变量修改" tabindex="-1"><a class="header-anchor" href="#变量修改"><span>变量修改</span></a></h4><table><thead><tr><th>变量设置方式</th><th>说明</th></tr></thead><tbody><tr><td><code>\${变量名#匹配字串}</code></td><td>从头向后开始匹配，删除符合匹配字串的最短数据</td></tr><tr><td><code>\${变量名##匹配字串}</code></td><td>从头向后开始匹配，删除符合匹配字串的最长数据</td></tr><tr><td><code>\${变量名%匹配字串}</code></td><td>从尾向前开始匹配，删除符合匹配字串的最短数据</td></tr><tr><td><code>\${变量名%%匹配字串}</code></td><td>从尾向前开始匹配，删除符合匹配字串的最长数据</td></tr><tr><td><code>\${变量名/旧的字串/新的字串}</code></td><td>将符合旧字串的第一个字串替换为新的字串</td></tr><tr><td><code>\${变量名//旧的字串/新的字串}</code></td><td>将符合旧字串的全部字串替换为新的字串</td></tr></tbody></table><p>从变量值最后开始匹配删除 <code>mypath</code> 变量中的 <code>/home/shiyanlou/mybin</code></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token assign-left variable">mypath</span><span class="token operator">=</span><span class="token variable">\${mypath<span class="token operator">%</span><span class="token operator">/</span>home<span class="token operator">/</span>shiyanlou<span class="token operator">/</span>mybin}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="删除变量" tabindex="-1"><a class="header-anchor" href="#删除变量"><span>删除变量</span></a></h4><p>可以使用 <code>unset</code> 命令删除一个环境变量：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">unset</span> mypath
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="让环境变量生效" tabindex="-1"><a class="header-anchor" href="#让环境变量生效"><span>让环境变量生效</span></a></h4><p>前面我们在 Shell 中修改了一个配置脚本文件之后（比如 zsh 的配置文件 home 目录下的 <code>.zshrc</code>），每次都要退出终端重新打开甚至重启主机之后其才能生效，很是麻烦，我们可以使用 <code>source</code> 命令来让其立即生效，如：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /home/shiyanlou
<span class="token builtin class-name">source</span> .zshrc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>source</code> 命令还有一个别名就是 <code>.</code>，上面的命令如果替换成 <code>.</code> 的方式就该是：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">.</span> ./.zshrc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在使用 <code>.</code> 的时候，需要注意与表示当前路径的那个点区分开。</p><h3 id="文件查找" tabindex="-1"><a class="header-anchor" href="#文件查找"><span>文件查找</span></a></h3><p>与搜索相关的命令常用的有 <code>whereis</code>，<code>which</code>，<code>find</code> 和 <code>locate</code>。</p><h4 id="whereis" tabindex="-1"><a class="header-anchor" href="#whereis"><span>whereis</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 查找文件 who 、find</span>
<span class="token function">whereis</span> <span class="token function">who</span>
<span class="token function">whereis</span> <span class="token function">find</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>whereis</code> 这个搜索很快，因为它并没有从硬盘中依次查找，而是直接从数据库中查询。</p><p><code>whereis</code> 只能搜索二进制文件（<code>-b</code>），man 帮助文件（<code>-m</code>）和源代码文件（<code>-s</code>）。</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>-b</code></td><td>只搜索二进制文件</td></tr><tr><td><code>-m</code></td><td>只搜索man 帮助文件</td></tr><tr><td><code>-s</code></td><td>只搜索源代码文件</td></tr></tbody></table><h4 id="locate" tabindex="-1"><a class="header-anchor" href="#locate"><span>locate</span></a></h4><p>使用 <code>locate</code> 命令查找文件也不会遍历硬盘，它通过查询 <code>/var/lib/mlocate/mlocate.db</code> 数据库来检索信息。不过这个数据库也不是实时更新的，系统会使用定时任务每天自动执行 <code>updatedb</code> 命令来更新数据库。所以有时候你刚添加的文件，它可能会找不到，需要手动执行一次 <code>updatedb</code> 命令（在我们的环境中必须先执行一次该命令）。注意这个命令也不是内置的命令，在部分环境中需要手动安装，然后执行更新。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt-get</span> update
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">locate</span>
<span class="token function">sudo</span> updatedb
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它可以用来查找指定目录下的不同文件类型，如查找 <code>/etc</code> 下所有以 sh 开头的文件：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">locate</span> /etc/sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查找 <code>/usr/share/</code> 下所有 jpg 文件：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">locate</span> /usr/share/<span class="token punctuation">\\</span>*.jpg
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>-b</code></td><td>只搜索二进制文件</td></tr><tr><td><code>-m</code></td><td>只搜索man 帮助文件</td></tr><tr><td><code>-s</code></td><td>只搜索源代码文件</td></tr><tr><td><code>-c</code></td><td>统计数目</td></tr><tr><td><code>-i</code></td><td>忽略大小写进行搜索</td></tr></tbody></table><h4 id="which小而精" tabindex="-1"><a class="header-anchor" href="#which小而精"><span>which小而精</span></a></h4><p><code>which</code> 本身是 Shell 内建的一个命令，我们通常使用 <code>which</code> 来确定是否安装了某个指定的程序，因为它只从 <code>PATH</code> 环境变量指定的路径中去搜索命令并且返回第一个搜索到的结果。也就是说，我们可以看到某个系统命令是否存在以及执行的到底是哪一个地方的命令。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">which</span> <span class="token function">man</span>
<span class="token function">which</span> nginx
<span class="token function">which</span> <span class="token function">ping</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="find精而细" tabindex="-1"><a class="header-anchor" href="#find精而细"><span>find精而细</span></a></h4><p><code>find</code> 应该是这几个命令中最强大的了，它不但可以通过文件类型、文件名进行查找而且可以根据文件的属性（如文件的时间戳，文件的权限等）进行搜索。</p><p>基本命令格式为 <code>find [path] [option] [action]</code></p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>-atime</code></td><td>最后访问时间</td></tr><tr><td><code>-ctime</code></td><td>最后修改文件内容的时间</td></tr><tr><td><code>-mtime</code></td><td>最后修改文件属性的时间</td></tr><tr><td><code>-name</code></td><td>按目录或文件名搜索</td></tr></tbody></table><p>下面以 <code>-mtime</code> 参数举例：</p><ul><li><code>-mtime n</code>：n 为数字，表示为在 n 天之前的“一天之内”修改过的文件</li><li><code>-mtime +n</code>：列出在 n 天之前（不包含 n 天本身）被修改过的文件</li><li><code>-mtime -n</code>：列出在 n 天之内（包含 n 天本身）被修改过的文件</li><li><code>-newer file</code>：file 为一个已存在的文件，列出比 file 还要新的文件名</li></ul><p>列出 home 目录中，当天（24 小时之内）有改动的文件：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">find</span> ~ <span class="token parameter variable">-mtime</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>列出用户家目录下比 /etc 目录新的文件：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">find</span> ~ <span class="token parameter variable">-newer</span> /etc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这条命令表示去 <code>/etc/</code> 目录下面 ，搜索名字叫做 interfaces 的文件或者目录。这是 <code>find</code> 命令最常见的格式，千万记住 <code>find</code> 的第一个参数是要搜索的地方。命令前面加上 <code>sudo</code> 是因为 shiyanlou 只是普通用户，对 <code>/etc</code> 目录下的很多文件都没有访问的权限，如果是 root 用户则不用使用。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">find</span> /etc/ <span class="token parameter variable">-name</span> interfaces
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="压缩文件" tabindex="-1"><a class="header-anchor" href="#压缩文件"><span>压缩文件</span></a></h3><p>使用 zip 打包文件夹</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">zip</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">-1</span> <span class="token parameter variable">-q</span> <span class="token parameter variable">-o</span> shiyanlou_1.zip /home/shiyanlou/Desktop <span class="token parameter variable">-x</span> ~/*.zip
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>-r</code></td><td>递归打包包含子目录的全部内容</td></tr><tr><td><code>-1</code></td><td>设置压缩级别，1 表示最快压缩但体积大，9 表示体积最小但耗时最久</td></tr><tr><td><code>-q</code></td><td>表示为安静模式，即不向屏幕输出信息</td></tr><tr><td><code>-o</code></td><td>表示输出文件，需在其后紧跟打包输出文件名</td></tr><tr><td><code>-x</code></td><td>排除指定文件，不将指定文件打包进压缩文件，这里只能使用绝对路径，否则不起作用</td></tr></tbody></table><p>查看文件信息</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">du</span> <span class="token parameter variable">-h</span> <span class="token parameter variable">-d</span> <span class="token number">0</span> *.zip ~ <span class="token operator">|</span> <span class="token function">sort</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>-h</code></td><td>显示文件大小单位</td></tr><tr><td><code>-d 0</code></td><td>查询文件深度，目录级别</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table>`,147),c=[t];function i(l,o){return a(),s("div",null,c)}const u=e(d,[["render",i],["__file","Linux系统.html.vue"]]),h=JSON.parse('{"path":"/devops/linux/Linux%E7%B3%BB%E7%BB%9F.html","title":"Linux系统","lang":"zh-CN","frontmatter":{"title":"Linux系统","date":"2024-04-12T17:07:05.000Z","description":"Linux目录结构Linux目录结构 常用命令 Shell 常用通配符： 用户及文件权限管理 二、Linux用户管理 查看用户 adduser 和 useradd 的区别是什么 答：useradd 只创建用户，不会创建用户密码和工作目录，创建完了需要使用 passwd 去设置新用户的密码。adduser 在创建用户的同时，会创建工作目录和密码（提示你设...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/docs/devops/linux/Linux%E7%B3%BB%E7%BB%9F.html"}],["meta",{"property":"og:site_name","content":"DahlZb小站"}],["meta",{"property":"og:title","content":"Linux系统"}],["meta",{"property":"og:description","content":"Linux目录结构Linux目录结构 常用命令 Shell 常用通配符： 用户及文件权限管理 二、Linux用户管理 查看用户 adduser 和 useradd 的区别是什么 答：useradd 只创建用户，不会创建用户密码和工作目录，创建完了需要使用 passwd 去设置新用户的密码。adduser 在创建用户的同时，会创建工作目录和密码（提示你设..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://doc.shiyanlou.com/linux_base/4-1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-21T11:50:37.000Z"}],["meta",{"property":"article:author","content":"DahlZb"}],["meta",{"property":"article:published_time","content":"2024-04-12T17:07:05.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-21T11:50:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Linux系统\\",\\"image\\":[\\"https://doc.shiyanlou.com/linux_base/4-1.png\\"],\\"datePublished\\":\\"2024-04-12T17:07:05.000Z\\",\\"dateModified\\":\\"2024-04-21T11:50:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"DahlZb\\",\\"url\\":\\"https://github.com/dahlzb\\"}]}"]]},"headers":[{"level":3,"title":"常用命令","slug":"常用命令","link":"#常用命令","children":[]},{"level":3,"title":"用户及文件权限管理","slug":"用户及文件权限管理","link":"#用户及文件权限管理","children":[]},{"level":3,"title":"目录结构及文件基本操作","slug":"目录结构及文件基本操作","link":"#目录结构及文件基本操作","children":[]},{"level":3,"title":"环境变量","slug":"环境变量","link":"#环境变量","children":[]},{"level":3,"title":"文件查找","slug":"文件查找","link":"#文件查找","children":[]},{"level":3,"title":"压缩文件","slug":"压缩文件","link":"#压缩文件","children":[]}],"git":{"createdTime":1713700237000,"updatedTime":1713700237000,"contributors":[{"name":"dahlzb","email":"1304187196@qq.com","commits":1}]},"readingTime":{"minutes":12.28,"words":3685},"filePathRelative":"devops/linux/Linux系统.md","localizedDate":"2024年4月12日","excerpt":"<figure><img src=\\"https://doc.shiyanlou.com/linux_base/4-1.png\\" alt=\\"Linux目录结构\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>Linux目录结构</figcaption></figure>\\n<h3>常用命令</h3>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token comment\\"># 列出目录文件</span>\\n<span class=\\"token function\\">ls</span>\\n<span class=\\"token function\\">ls</span> /home\\n<span class=\\"token comment\\"># 用较长格式列出文件</span>\\n<span class=\\"token function\\">ls</span> <span class=\\"token parameter variable\\">-l</span>\\n<span class=\\"token comment\\"># 查看所有文件包括隐藏文件</span>\\n<span class=\\"token function\\">ls</span> <span class=\\"token parameter variable\\">-a</span>\\n<span class=\\"token comment\\"># 查看某个目录的完整属性</span>\\n<span class=\\"token function\\">ls</span> <span class=\\"token parameter variable\\">-dl</span> <span class=\\"token operator\\">&lt;</span>目录名<span class=\\"token operator\\">&gt;</span>\\n<span class=\\"token comment\\"># 显示所有文件大小 a-查看目录内所有文件，s-显示文件大小，S-按文件大小排序，</span>\\n<span class=\\"token function\\">ls</span> <span class=\\"token parameter variable\\">-asSh</span>\\n<span class=\\"token comment\\"># 切换目录</span>\\n<span class=\\"token builtin class-name\\">cd</span> /home/shiyanlou\\n<span class=\\"token comment\\"># 创建文件</span>\\n<span class=\\"token function\\">touch</span> asd.txt fgh.txt\\n<span class=\\"token comment\\"># 创建连续的多个文件</span>\\n<span class=\\"token function\\">touch</span> love_<span class=\\"token punctuation\\">{</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">..</span><span class=\\"token number\\">10</span><span class=\\"token punctuation\\">}</span>_shiyanlou.txt\\n<span class=\\"token comment\\"># 查找文件</span>\\n<span class=\\"token function\\">ls</span> *.txt\\n<span class=\\"token comment\\"># 安装软件</span>\\n<span class=\\"token function\\">sudo</span> <span class=\\"token function\\">apt-get</span> <span class=\\"token function\\">install</span> sysvbanner\\n</code></pre></div>","autoDesc":true}');export{u as comp,h as data};
